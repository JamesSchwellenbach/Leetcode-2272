class Solution: #beats 45.30% runtime, 11.97% Memory 
    def largestVariance(self, s: str) -> int:
        unique = set(s)
        pairs = [(s1,s2) for s1 in unique for s2 in unique if s1 != s2]
        occ1, occ2 = 0, 0
        best = 0
        for pair in pairs:
            occ1 = occ2 = 0 #occurrences for both characters that are being checked
            for letter in s:
                if letter not in pair:
                    continue
                if letter == pair[0]:
                    occ1 += 1
                elif letter == pair[1]:
                    occ2 += 1
                if occ1 < occ2:
                    occ1 = occ2 = 0
                elif occ1 > 0 and occ2 > 0:
                    best = max(best, occ1 - occ2)
        s = s[::-1]
        for pair in pairs:
            occ1 = occ2 = 0 #occurrences for both characters that are being checked
            for letter in s:
                if letter not in pair:
                    continue
                if letter == pair[0]:
                    occ1 += 1
                elif letter == pair[1]:
                    occ2 += 1
                if occ1 < occ2:
                    occ1 = occ2 = 0
                elif occ1 > 0 and occ2 > 0:
                    best = max(best, occ1 - occ2)
        return best
